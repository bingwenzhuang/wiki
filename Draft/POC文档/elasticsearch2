1. master 节点作用 负责集群层面的相关操作,管理集群变更
	路由信息 -- 接受数据节点的信息;增量内容并压缩过
	主从分片负载均衡
	副分片提升为主分片 -- 条件和操作时长
	配置信息 
	选主zen discovery
		
2. 数据节点 数据，执行数据相关操作
	主从同步
3. 预处理节点
   预处理性能点
4. 协调节点  负责请求的及负载均衡
	读写请求负载均衡
	路由信息实时性
	合并结果 -- 性能问题
	
主节点/数据节点故障感知能力


集群启动过程
	选举主节点(bully算法)
		对节点ID进行排序，选择节点ID大的为master节点
			参选人数需要过半 quorum 临时master节点
			得票数据过半
			当探测到节点离开事件时，必须判断当前节点数是否过半;如果达不到quorum，则放弃Master身份，重新加入集群 discovery.zen.minimum_master_nodes
		再将最新的元组信息传递到master节点(gateway  -- 应该只有主节点资格才能参与)
			因此它的第一个任务是选举元信息，让各节点把各自存储的元信息发过来，根据版本号确定最新的元信息，然后把这个信息广播下去
			集群元信息的选举包括两个级别：集群级和索引级
				先集群级别的元组信息
				再索引级别的元组信息是在allocation模块完成
					选主分片询问量=shard 数×节点数
						每个分片都有个uuid,在集群元组数据中记录那个分片是最新的
						从ES 5.x开始，主分片选举过程是通过集群级元信息中记录的“最新主分片的列表”来确定主分片的：汇报信息中存在，并且这个列表中也存在(关键)
					副本
						分片的延迟index.unassigned.node_left.delayed_timeout
			block 信息依赖于DataNode的上报
		在选举过程中，不接受新节点的加入请求
	index recovery
		主分片通过tranlog 恢复
		副分片(详细得还得再了解下)
			在主分片所在节点，获取translog保留锁，从获取保留锁开始，会保留translog不受其刷盘清空的影响
			对translog做快照，这个快照里包含从phase1开始，到执行translog快照期间的新增索引。将这些translog发送到副分片所在节点进行重放
			
		
		
		
节点启动流程
节点关闭流程
	主节点关闭会影响读写吗? 有一小段时间处于无主状态，无主状态情况下会影响集群的读写吗(跟参数no_master_block有关,可读时候会读取一些过时数据)? 选择成功，需要经历gatewary和index recovery对读写的影响呢?
	主分片节点关闭会影响读写吗?
	主节点+主分片关闭会影响读写吗?   -- 重新进行分片分配
	es读写成功，但客户端未能收到成功读写的response
	线程池的请求在一定的超时时间内可能都会成功完成
	


GET _cluster/state
GET _cluster/allocation/explain
reroute API提供了一个子命令allocate_stale_primary
allocate_empty_primary命令只能用于最糟糕的情况，其含义很好理解

-Des.path.home=/Users/zhangchao-so/Documents/mybook/eshome -Des.path.conf=/Users/zhangchao-so/Documents/mybook/eshome/config -Xms1g -Xmx1g -Dlog4j2.disable.jmx=true -Djava.security.policy=/Users/zhangchao-so/Documents/mybook/eshome/config/elasticsearch.policy