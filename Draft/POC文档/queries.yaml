pg_replication:
  query: |
    SELECT application_name AS appname, usename, coalesce(client_addr::TEXT,'localhost') AS address, pid::TEXT, client_port,
           CASE state WHEN 'streaming' THEN 0 WHEN 'startup' THEN 1 WHEN 'catchup' THEN 2 WHEN 'backup' THEN 3 WHEN 'stopping' THEN 4 ELSE -1 END AS state,
           CASE sync_state WHEN 'async' THEN 0 WHEN 'potential' THEN 1 WHEN 'sync' THEN 2 WHEN 'quorum' THEN 3 ELSE -1 END AS sync_state,
           sync_priority, backend_xmin::TEXT::BIGINT AS backend_xmin, current.lsn - '0/0' AS lsn,
           current.lsn - sent_lsn AS sent_diff, current.lsn - write_lsn AS write_diff, current.lsn - flush_lsn AS flush_diff, current.lsn - replay_lsn AS replay_diff,
           sent_lsn - '0/0' AS sent_lsn, write_lsn - '0/0' AS write_lsn, flush_lsn - '0/0' AS flush_lsn, replay_lsn - '0/0' AS replay_lsn,
           coalesce(extract(EPOCH FROM write_lag), 0)  AS write_lag, coalesce(extract(EPOCH FROM flush_lag), 0)  AS flush_lag, coalesce(extract(EPOCH FROM replay_lag), 0) AS replay_lag,
           extract(EPOCH FROM current_timestamp) AS "time", extract(EPOCH FROM backend_start) AS launch_time
    FROM pg_stat_replication, (SELECT CASE WHEN pg_is_in_recovery() THEN pg_last_wal_replay_lsn() ELSE pg_current_wal_lsn() END AS lsn) current;
  master: true
  metrics:
    - appname:
        usage: LABEL
        description: Name of the application that is connected to this WAL sender
    - usename:
        usage: LABEL
        description: Name of the user logged into this WAL sender process
    - address:
        usage: LABEL
        description: IP address of the client connected to this WAL sender, localhost for unix socket
        # IP address of the client connected to this WAL sender. If this field is null, it indicates that the client is connected via a Unix socket on the server machine.
    - pid:
        usage: LABEL
        description: Process ID of the WAL sender process
    - client_port:
        usage: GAUGE
        description: TCP port number that the client is using for communication with this WAL sender, or -1 if a Unix socket is used
    - state:
        usage: GAUGE
        description: Current WAL sender encoded state 0-4 for streaming|startup|catchup|backup|stopping
        # Current WAL sender state. Possible values are: streaming|startup|catchup|backup|stopping
    - sync_state:
        usage: GAUGE
        description: Encoded synchronous state of this standby server, 0-3 for async|potential|sync|quorum
        # Synchronous state of this standby server. Possible values are: async|potential|sync|quorum
    - sync_priority:
        usage: GAUGE
        description: Priority of this standby server for being chosen as the synchronous standby
        # Priority of this standby server for being chosen as the synchronous standby in a priority-based synchronous replication. This has no effect in a quorum-based synchronous replication.
    - backend_xmin:
        usage: COUNTER
        description: This standby's xmin horizon reported by hot_standby_feedback.
    - lsn:
        usage: COUNTER
        description: Current log position on this server
    - sent_diff:
        usage: GAUGE
        description: Last log position sent to this standby server diff with current lsn
    - write_diff:
        usage: GAUGE
        description: Last log position written to disk by this standby server diff with current lsn
    - flush_diff:
        usage: GAUGE
        description: Last log position flushed to disk by this standby server diff with current lsn
    - replay_diff:
        usage: GAUGE
        description: Last log position replayed into the database on this standby server diff with current lsn
    - sent_lsn:
        usage: COUNTER
        description: Last write-ahead log location sent on this connection
    - write_lsn:
        usage: COUNTER
        description: Last write-ahead log location written to disk by this standby server
    - flush_lsn:
        usage: COUNTER
        description: Last write-ahead log location flushed to disk by this standby server
    - replay_lsn:
        usage: COUNTER
        description: Last write-ahead log location replayed into the database on this standby server
    - write_lag:
        usage: GAUGE
        description: Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written it
        # Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written it (but not yet flushed it or applied it). This can be used to gauge the delay that synchronous_commit level remote_write incurred while committing if this server was configured as a synchronous standby.
    - flush_lag:
        usage: GAUGE
        description: Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written and flushed it
        # Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written and flushed it (but not yet applied it). This can be used to gauge the delay that synchronous_commit level on incurred while committing if this server was configured as a synchronous standby.
    - replay_lag:
        usage: GAUGE
        description: Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written, flushed and applied it
        # Time elapsed between flushing recent WAL locally and receiving notification that this standby server has written, flushed and applied it. This can be used to gauge the delay that synchronous_commit level remote_apply incurred while committing if this server was configured as a synchronous standby.
    - time:
        usage: COUNTER
        description: Current timestamp in unix epoch
    - launch_time:
        usage: COUNTER
        description: Time when this process was started, i.e., when the client connected to this WAL sender

pg_downstream:
  query: "SELECT l.state, coalesce(count, 0 ) AS count FROM unnest(ARRAY ['streaming','startup','catchup', 'backup', 'stopping']) l(state) LEFT JOIN (SELECT state, count(*) AS count FROM pg_stat_replication GROUP BY state)r ON l.state =  r.state;"
  master: true
  metrics:
    - state:
        usage: "LABEL"
        description: "description replication stream state"
    - count:
        usage: "GAUGE"
        description: "replication state is alive"

pg_info:
  query: |
    SELECT extract(EPOCH FROM CURRENT_TIMESTAMP)                  AS timestamp,
           extract(EPOCH FROM now() - pg_postmaster_start_time()) AS uptime,
           extract(EPOCH FROM pg_postmaster_start_time())         AS boot_time,
           pg_current_wal_lsn() - '0/0'                           AS lsn,
           pg_current_wal_insert_lsn() - '0/0'                    AS insert_lsn,
           pg_current_wal_lsn() - '0/0'                           AS write_lsn,
           pg_current_wal_flush_lsn() - '0/0'                     AS flush_lsn,
           NULL::BIGINT                                           AS receive_lsn,
           NULL::BIGINT                                           AS replay_lsn,
           extract(EPOCH FROM now() - pg_conf_load_time())        AS conf_reload_time,
           NULL::FLOAT                                            AS last_replay_time,
           0::FLOAT                                               AS lag,
           pg_is_in_recovery()                                    AS is_in_recovery,
           FALSE                                                  AS is_wal_replay_paused,
           pg_is_in_backup()                                      AS is_in_backup,
           extract(EPOCH FROM now() - pg_backup_start_time())     AS backup_time;
  master: true
  metrics:
    - timestamp:
        name: timestamp
        description: current database timestamp in unix epoch
        usage: GAUGE
    - uptime:
        name: uptime
        description: seconds since postmaster start
        usage: GAUGE
    - boot_time:
        name: boot_time
        description: postmaster boot timestamp in unix epoch
        usage: GAUGE
    - lsn:
        name: lsn
        description: log sequence number, current write location
        usage: COUNTER
    - insert_lsn:
        name: insert_lsn
        description: primary only, location of current wal inserting
        usage: COUNTER
    - write_lsn:
        name: write_lsn
        description: primary only, location of current wal writing
        usage: COUNTER
    - flush_lsn:
        name: flush_lsn
        description: primary only, location of current wal syncing
        usage: COUNTER
    - receive_lsn:
        name: receive_lsn
        description: replica only, location of wal synced to disk
        usage: COUNTER
    - replay_lsn:
        name: replay_lsn
        description: replica only, location of wal applied
        usage: COUNTER
    - conf_reload_time:
        name: conf_reload_time
        description: seconds since last configuration reload
        usage: GAUGE
    - last_replay_time:
        name: last_replay_time
        description: time when last transaction been replayed
        usage: GAUGE
    - lag:
        name: lag
        description: replica only, replication lag in seconds
        usage: GAUGE
    - is_in_recovery:
        name: is_in_recovery
        description: 1 if in recovery mode
        usage: GAUGE
    - is_wal_replay_paused:
        name: is_wal_replay_paused
        description: 1 if wal play is paused
        usage: GAUGE
    - is_in_backup:
        name: is_in_backup
        description: 1 if backup is in progress
        usage: GAUGE
    - backup_time:
        name: backup_time
        description: seconds since current backup start
        usage: GAUGE

pg_stat_statements:
  query: "SELECT t2.rolname, t3.datname, queryid, calls, total_time / 1000 as total_time_seconds, min_time / 1000 as min_time_seconds, max_time / 1000 as max_time_seconds, mean_time / 1000 as mean_time_seconds, stddev_time / 1000 as stddev_time_seconds, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time / 1000 as blk_read_time_seconds, blk_write_time / 1000 as blk_write_time_seconds FROM pg_stat_statements t1 JOIN pg_roles t2 ON (t1.userid=t2.oid) JOIN pg_database t3 ON (t1.dbid=t3.oid) WHERE t2.rolname != 'rdsadmin'"
  master: true
  metrics:
    - rolname:
        usage: "LABEL"
        description: "Name of user"
    - datname:
        usage: "LABEL"
        description: "Name of database"
    - queryid:
        usage: "LABEL"
        description: "Query ID"
    - calls:
        usage: "COUNTER"
        description: "Number of times executed"
    - total_time_seconds:
        usage: "COUNTER"
        description: "Total time spent in the statement, in milliseconds"
    - min_time_seconds:
        usage: "GAUGE"
        description: "Minimum time spent in the statement, in milliseconds"
    - max_time_seconds:
        usage: "GAUGE"
        description: "Maximum time spent in the statement, in milliseconds"
    - mean_time_seconds:
        usage: "GAUGE"
        description: "Mean time spent in the statement, in milliseconds"
    - stddev_time_seconds:
        usage: "GAUGE"
        description: "Population standard deviation of time spent in the statement, in milliseconds"
    - rows:
        usage: "COUNTER"
        description: "Total number of rows retrieved or affected by the statement"
    - shared_blks_hit:
        usage: "COUNTER"
        description: "Total number of shared block cache hits by the statement"
    - shared_blks_read:
        usage: "COUNTER"
        description: "Total number of shared blocks read by the statement"
    - shared_blks_dirtied:
        usage: "COUNTER"
        description: "Total number of shared blocks dirtied by the statement"
    - shared_blks_written:
        usage: "COUNTER"
        description: "Total number of shared blocks written by the statement"
    - local_blks_hit:
        usage: "COUNTER"
        description: "Total number of local block cache hits by the statement"
    - local_blks_read:
        usage: "COUNTER"
        description: "Total number of local blocks read by the statement"
    - local_blks_dirtied:
        usage: "COUNTER"
        description: "Total number of local blocks dirtied by the statement"
    - local_blks_written:
        usage: "COUNTER"
        description: "Total number of local blocks written by the statement"
    - temp_blks_read:
        usage: "COUNTER"
        description: "Total number of temp blocks read by the statement"
    - temp_blks_written:
        usage: "COUNTER"
        description: "Total number of temp blocks written by the statement"
    - blk_read_time_seconds:
        usage: "COUNTER"
        description: "Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)"
    - blk_write_time_seconds:
        usage: "COUNTER"
        description: "Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)"

pg_vacuuming:
  query: |
    SELECT datname, pid, relid::RegClass AS relname,
        CASE phase WHEN 'scanning heap' THEN (CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_scanned / heap_blks_total ELSE 0.0 END)
        WHEN 'vacuuming heap' THEN (CASE WHEN heap_blks_total > 0 THEN 1.0 * heap_blks_vacuumed / heap_blks_total ELSE 0 END)
        ELSE NULL END AS progress FROM pg_stat_progress_vacuum pspv;
  metrics:
    - datname:
        usage: LABEL
        description: database name
    - pid:
        usage: LABEL
        description: process id of indexing table
    - relname:
        usage: LABEL
        description: relation name of indexed table
    - progress:
        usage: GAUGE
        description: the actual progress
 
## log double check
pg_size:
  query: |
    SELECT datname, pg_database_size(oid) AS bytes FROM pg_database UNION ALL
      SELECT 'log' AS datname, (SELECT (coalesce(sum(size), 0)) AS size FROM pg_catalog.pg_ls_logdir()) AS bytes UNION ALL
      SELECT 'wal' AS datname, (SELECT (coalesce(sum(size), 0)) AS size FROM pg_catalog.pg_ls_waldir()) AS bytes;
  metrics:
    - datname:
        usage: LABEL
        description: Database name, or special category 'wal' , 'log'
    - bytes:
        usage: GAUGE
        description: File size in bytes
      
pg_lock:
  query: |
    SELECT datname, mode, coalesce(count, 0) AS count
      FROM (SELECT d.oid AS database, d.datname, l.mode FROM pg_database d, unnest(ARRAY ['AccessShareLock','RowShareLock','RowExclusiveLock','ShareUpdateExclusiveLock', 'ShareLock','ShareRowExclusiveLock','ExclusiveLock','AccessExclusiveLock']) l(mode) WHERE d.datallowconn AND NOT d.datistemplate) base
      LEFT JOIN (SELECT database, mode, count(*) AS count FROM pg_locks WHERE database IS NOT NULL GROUP BY 1, 2) cnt USING (database, mode);
  metrics:
    - datname:
        usage: LABEL
        description: Name of the database this backend is connected to
    - mode:
        usage: LABEL
        description: Name of the lock mode held or desired by this process
    - count:
        usage: GAUGE
        description: Number of locks of corresponding mode and database

pg_process_idle:
  query: |
    WITH
      metrics AS (
        SELECT
          application_name,
          SUM(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change))::bigint)::float AS process_idle_seconds_sum,
          COUNT(*) AS process_idle_seconds_count
        FROM pg_stat_activity
        WHERE state = 'idle'
        GROUP BY application_name
      ),
      buckets AS (
        SELECT
          application_name,
          le,
          SUM(
            CASE WHEN EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change)) <= le
              THEN 1
              ELSE 0
            END
          )::bigint AS bucket
        FROM
          pg_stat_activity,
          UNNEST(ARRAY[1, 2, 5, 15, 30, 60, 90, 120, 300]) AS le
        GROUP BY application_name, le
        ORDER BY application_name, le
      )
    SELECT
      application_name,
      process_idle_seconds_sum as seconds_sum,
      process_idle_seconds_count as seconds_count,
      ARRAY_AGG(le) AS seconds,
      ARRAY_AGG(bucket) AS seconds_bucket
    FROM metrics JOIN buckets USING (application_name)
    GROUP BY 1, 2, 3
  metrics:
    - application_name:
        usage: "LABEL"
        description: "Application Name"
    - seconds:
        usage: "HISTOGRAM"
        description: "Idle time of server processes"
        
pg_meta:
  query: |
    SELECT (SELECT system_identifier FROM pg_control_system()) AS cluster_id,
           current_setting('cluster_name')                     AS cluster_name,
           current_setting('port')                             AS listen_port,
           current_setting('data_directory')                   AS data_dir,
           current_setting('config_file')                      AS conf_path,
           current_setting('hba_file')                         AS hba_path,
           current_setting('wal_level')                        AS wal_level,
           current_setting('server_version')                   AS version,
           current_setting('server_version_num')               AS ver_num,
           current_setting('shared_preload_libraries')         AS extensions,
           'N/A'                                               AS primary_conninfo,
           1                                                   AS info
  metrics:
    - cluster_id:
        usage: LABEL
        description: cluster system identifier
    - cluster_name:
        usage: LABEL
        description: cluster name
    - listen_port:
        usage: LABEL
        description: listen port
    - data_dir:
        usage: LABEL
        description: data directory path
    - conf_path:
        usage: LABEL
        description: postgresql.conf path
    - hba_path:
        usage: LABEL
        description: pg_hba.conf path
    - wal_level:
        usage: LABEL
        description: wal level
    - version:
        usage: LABEL
        description: server version in human readable format
    - ver_num:
        usage: LABEL
        description: server version number in machine readable format
    - extensions:
        usage: LABEL
        description: server installed preload libraries
    - primary_conninfo:
        usage: LABEL
        description: connection string to upstream (do not set password here)
    - info:
        usage: GAUGE
        description: constant 1
        
pg_slow:
  query: "SELECT t2.rolname, t3.datname, queryid, sum(calls) as calls FROM pg_stat_statements t1 JOIN pg_roles t2 ON (t1.userid=t2.oid) JOIN pg_database t3 ON (t1.dbid=t3.oid) WHERE t2.rolname != 'rdsadmin' and mean_time > 1000 group by t2.rolname, t3.datname, queryid"
  metrics:
    - rolname:
        usage: "LABEL"
        description: "Name of user"
    - datname:
        usage: "LABEL"
        description: "Name of database"
    - queryid:
        usage: "LABEL"
        description: "Query ID"
    - calls:
        usage: "COUNTER"
        description: "Number of times executed"