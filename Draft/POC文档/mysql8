## 应用需要设置的
allowPublicKeyRetrieval=true
## mysqlrouter 
端口暴露
日志等级设置
https://github.com/rluisr/mysqlrouter_exporter
## mysql group 
### 调整最大共识并发数
group_replication_get_write_concurrency()
group_replication_set_write_concurrency(10)

## mbind: Operation not permitted
https://blog.csdn.net/qq_37768368/article/details/110137146

admin_address
admin_port
binlog_expire_logs_seconds  and expire_logs_days is same
binlog_row_metadata 
binlog_transaction_compression
binlog_transaction_compression_level_zstd
histogram_generation_max_mem_size 8.0.2版本引入，是可以动态设置的global、session级参数，默认值为20000000，可以设置为1000000到18446744073709551615（32位系统为4294967295）之间任意值。当建立直方图时，需要将表的数据读入内存，但是当表过大时可能会将将大量数据读入内存，为规避这个风险，server层根据histogram_generation_max_mem_size设置进行计算，计算出读出多少行进入内存，进行取样
information_schema_stats_expiry
innodb_ddl_buffer_size 8.0.27
innodb_ddl_threads   8.0.27 
innodb_dedicated_server  8.0.3 不用
innodb_doublewrite_batch_size  8.0.20 -- 可用于优化性能
innodb_fsync_threshold MySQL 8.0.13 
innodb_idle_flush_pct   8.0.18
innodb_log_spin_cpu_abs_lwm 8.0.11 控制MySQLD自身的进程使用率，进程cpu usage < innodb_log_spin_cpu_abs_lwm 不使自旋
innodb_log_spin_cpu_pct_hwm 8.0.11 所有core cpu 使用率,大于该值,不使自旋
innodb_log_wait_for_flush_spin_hwm  8.0.11 400 microseconds
innodb_log_writer_threads  8.0.22  --先关闭,后续可以再开启 
innodb_log_write_ahead_size 
innodb_parallel_read_threads 8.0.14 
innodb_segment_reserve_factor 8.0.26
log_replica_updates -- log_slave_updates.  8.0.26
log_slow_replica_statements  -- log_slow_slave_statements 8.0.26
## 总的 一般够用
temptable_max_ram

rpl_read_size
replica_net_timeout
replica_parallel_type
replica_parallel_workers
replica_skip_errors
slave_parallel_type
slave_parallel_workers
 
character_set_server
lock_wait_timeout

long_query_time == 0.1 
log_slow_admin_statements = 1
log_slow_slave_statements = 1

transaction_write_set_extraction
binlog_transaction_dependency_history_size writeset hash的大小
binlog_transaction_dependency_tracking = WRITESET
slave_preserve_commit_order = 1
slave_checkpoint_period = 2
## 用于等待更多事务作为同一个组事务提交的控制手段
binlog_group_commit_sync_delay
binlog_group_commit_sync_no_delay_count
log_error_verbosity = 3
sql_require_primary_key 

disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
## MySQL 8.0.20之前版本
binlog_checksum=NONE


#mgr settings
plugin_load_add = 'mysql_clone.so'




## 流控参数
group_replication_flow_control_mode = "DISABLED"
group_replication_flow_control_certifier_threshold
group_replication_flow_control_applier_threshold
group_replication_flow_control_period
group_replication_flow_control_member_quota_percent
group_replication_consistency 
## 基本参数
plugin_load_add = 'group_replication.so'
group_replication_group_name = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"
group_replication_local_address = "172.16.16.10:33061"
group_replication_group_seeds = "172.16.16.10:33061,172.16.16.11:33061,172.16.16.12:33061"
group_replication_start_on_boot = OFF
group_replication_bootstrap_group = OFF
group_replication_single_primary_mode = ON
group_replication_force_members ?? == START GROUP_REPLICATION 发起该命令，该参数必须为null
group_replication_transaction_size_limit 默认是143M
group_replication_exit_state_action = READ_ONLY ??  应该是关闭掉
group_replication_autorejoin_tries   2016
group_replication_recovery_reconnect_interval 60s??/
group_replication_gtid_assignment_block_size  ??
group_replication_ip_whitelist 8.0.22 已经废弃了
group_replication_message_cache_size 1G -- 先采用默认值吧
group_replication_poll_spin_loops 100
group_replication_enforce_update_everywhere_checks 单主模式下，必须禁止
group_replication_compression_threshold
group_replication_components_stop_timeout
group_replication_communication_max_message_size 默认值10M 分片的阀值
group_replication_communication_debug_options
group_replication_clone_threshold ?? 这个很关键 -- 是不是mysql_clone 插件有关系呢? 相关的,但一般不设置它
group_replication_paxos_single_leader 8.0.27 -- 用于单主模式,是否可能提供系统的可用性呢
## 选主权重
## 自动重新加入组
## 恢复配置
## SSL部分:这部分不详细介绍

group_replication_unreachable_majority_timeout -- 设置3s??
group_replication_member_expel_timeout -- 涉及到大事务问题?? 怀疑和删除 -- 设置3s 

group_replication_recovery_retry_count
group_replication_recovery_reconnect_interval
group_replication_recovery_complete_at -- 采用默认值就可以

rpl_read_size
replica_net_timeout
replica_parallel_type
slave_parallel_type
replica_parallel_workers
replica_skip_errors
slave_parallel_type
slave_parallel_workers
replica_preserve_commit_order
slave_preserve_commit_order 

注意：当完成状态传输后，组复制将重新启动joiner节点的数据库进程以完成该过程。如果在joiner节点上设置了group_replication_start_on_boot=OFF，则在数据库进程重新启动完成之后必须再次手动执行START GROUP_REPLICATION语句启动组复制。如果在配置文件中设置了group_replication_start_on_boot=ON和启动组复制所需的其他设置，或者使用了SET PERSIST语句将group_replication_start_on_boot=ON和启动组复制所需的其他设置进行了持久化，则在数据库进程重启之后不需要进行干预，组复制会继续自动执行成员加入组并使其达到ONLINE状态的流程

脑裂问题 --  

performance_schema.replication_group_communication_information 
performance_schema.replication_group_member_stats
performance_schema.replication_group_members
performance_schema.replication_connection_status  -- replay log
performance_schema.replication_applier_status -- apply  
performance_schema.replication_applier_status_by_worker -- apply 错误信息
group_replication_recovery 
group_replication_applier 

ansible-playbook -i hosts  playbooks/mysql_single.yaml --check


select * from information_schema.RESOURCE_GROUPS rg ;
select * from mysql.replication_asynchronous_connection_failover_managed racfm ;
select * from mysql.replication_asynchronous_connection_failover racf ;
select * from mysql.replication_group_configuration_version rgcv ;
select * from mysql.replication_group_member_actions rgma ;
select * from performance_schema.replication_group_members rgm ;
select * from performance_schema.replication_group_member_stats rgms ;
select * from performance_schema.replication_group_member_actions rgma ;
select * from performance_schema.replication_group_configuration_version rgcv ;
select * from performance_schema.replication_group_communication_information rgci ;
select * from performance_schema.replication_connection_status rcs ;
select * from performance_schema.replication_connection_configuration rcc ;
select * from performance_schema.replication_applier_configuration rac ;
select * from performance_schema.replication_applier_filters raf ;
select * from performance_schema.replication_applier_global_filters ragf ;
select * from performance_schema.replication_applier_status ras ;
select * from performance_schema.replication_applier_status_by_coordinator rasbc ;
select * from performance_schema.replication_applier_status_by_worker rasbw ;



docker run -d \
  --network host \
  --name=mgr1 \
  -e MYSQL_ROOT_PASSWORD=Yealink1105 \
  -v "/etc/localtime:/etc/localtime:ro" \
  -v "/etc/hosts:/etc/hosts:ro" \
  -v "/data/db/mysql/3307/data:/var/lib/mysql:rw" \
  -v "/data/db/mysql/3307/log:/var/log/mysql:rw" \
  -v "/data/db/mysql/3307/config:/etc/mysql:rw" \
  -v "/data/db/mysql/3307/sock:/run/mysqld:rw" \
  --restart=always \
   cr.yealinkops.com/3rdparty/mysql:8.0.27
   

docker run -d \
  --network host \
  --name=mgr2 \
  -e MYSQL_ROOT_PASSWORD=Yealink1105 \
  -v "/etc/localtime:/etc/localtime:ro" \
  -v "/etc/hosts:/etc/hosts:ro" \
  -v "/data/db/mysql/3308/data:/var/lib/mysql:rw" \
  -v "/data/db/mysql/3308/log:/var/log/mysql:rw" \
  -v "/data/db/mysql/3308/config:/etc/mysql:rw" \
  -v "/data/db/mysql/3308/sock:/run/mysqld:rw" \
  --restart=always \
   cr.yealinkops.com/3rdparty/mysql:8.0.27
   
  
docker run -d \
  --network host \
  --name=mgr3 \
  -e MYSQL_ROOT_PASSWORD=Yealink1105 \
  -v "/etc/localtime:/etc/localtime:ro" \
  -v "/etc/hosts:/etc/hosts:ro" \
  -v "/data/db/mysql/3309/data:/var/lib/mysql:rw" \
  -v "/data/db/mysql/3309/log:/var/log/mysql:rw" \
  -v "/data/db/mysql/3309/config:/etc/mysql:rw" \
  -v "/data/db/mysql/3309/sock:/run/mysqld:rw" \
  --restart=always \
   cr.yealinkops.com/3rdparty/mysql:8.0.27
   

docker run -d \
  --network host \
  --name=mysqlrouter \
  -e MYSQL_HOST=10.200.112.191 \
  -e MYSQL_PORT=3307 \
  -e MYSQL_USER=root \
  -e MYSQL_PASSWORD=Yealink1105 \
  -e MYSQL_INNODB_CLUSTER_MEMBERS=3 \
  --restart=always \
   mysql/mysql-router:8.0.27

   

CREATE USER rpl_user@'%' IDENTIFIED WITH 'mysql_native_password' BY 'Yealink1105';
ALTER USER 'rpl_user'@'%' IDENTIFIED WITH mysql_native_password BY 'Yealink1105';    

  
SET SQL_LOG_BIN=0;
CREATE USER rpl_user@'%' IDENTIFIED BY 'Yealink1105';
GRANT REPLICATION SLAVE ON *.* TO rpl_user@'%';
GRANT BACKUP_ADMIN ON *.* TO rpl_user@'%';
FLUSH PRIVILEGES;
SET SQL_LOG_BIN=1;

CHANGE REPLICATION SOURCE TO SOURCE_USER='rpl_user', SOURCE_PASSWORD='Yealink1105' FOR CHANNEL 'group_replication_recovery';

SET SQL_LOG_BIN=0; 
SET GLOBAL group_replication_bootstrap_group=ON;
START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group=OFF;

SELECT * FROM performance_schema.replication_group_members;

START GROUP_REPLICATION;

CREATE DATABASE test;
USE test;
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);
INSERT INTO t1 VALUES (1, 'Luis');
select * from t1;
SHOW BINLOG EVENTS;


stop GROUP_REPLICATION;
set gtid_next='795bb1f4-4cf3-11ec-a844-fa163ed4cd9d:6';
begin;commit;
set gtid_next="AUTOMATIC";
start GROUP_REPLICATION;


GCS_DEBUG_NONE



shell.connect('root@node1:3306);
var cluster = dba.createCluster('prodCluster', {adoptFromGR: true});
cluster.status();

mysqlrouter --bootstrap ic@ic-1:3306 --user=root 
mysqlrouter & 

 


docker pull mysql/mysql-router:8.0.27

##### mysql router


# File automatically generated during MySQL Router bootstrap
[DEFAULT]
user=mysqlrouter
logging_folder=
runtime_folder=/tmp/mysqlrouter/run
data_folder=/tmp/mysqlrouter/data
keyring_path=/tmp/mysqlrouter/data/keyring
master_key_path=/tmp/mysqlrouter/mysqlrouter.key
connect_timeout=15
read_timeout=30
dynamic_state=/tmp/mysqlrouter/data/state.json
client_ssl_cert=/tmp/mysqlrouter/data/router-cert.pem
client_ssl_key=/tmp/mysqlrouter/data/router-key.pem
client_ssl_mode=PREFERRED
server_ssl_mode=AS_CLIENT
server_ssl_verify=DISABLED

[logger]
level = INFO

[metadata_cache:myCluster]
cluster_type=gr
router_id=1
user=mysql_router1_yj7gpl5k8yy9
metadata_cluster=myCluster
ttl=0.5
auth_cache_ttl=-1
auth_cache_refresh_interval=2
use_gr_notifications=0

[routing:myCluster_rw]
bind_address=0.0.0.0
bind_port=6446
destinations=metadata-cache://myCluster/?role=PRIMARY
routing_strategy=first-available
protocol=classic

[routing:myCluster_ro]
bind_address=0.0.0.0
bind_port=6447
destinations=metadata-cache://myCluster/?role=SECONDARY
routing_strategy=round-robin-with-fallback
protocol=classic

[routing:myCluster_x_rw]
bind_address=0.0.0.0
bind_port=6448
destinations=metadata-cache://myCluster/?role=PRIMARY
routing_strategy=first-available
protocol=x

[routing:myCluster_x_ro]
bind_address=0.0.0.0
bind_port=6449
destinations=metadata-cache://myCluster/?role=SECONDARY
routing_strategy=round-robin-with-fallback
protocol=x

[http_server]
port=8443
ssl=1
ssl_cert=/tmp/mysqlrouter/data/router-cert.pem
ssl_key=/tmp/mysqlrouter/data/router-key.pem

[http_auth_realm:default_auth_realm]
backend=default_auth_backend
method=basic
name=default_realm

[rest_router]
require_realm=default_auth_realm

[rest_api]

[http_auth_backend:default_auth_backend]
backend=metadata_cache

[rest_routing]
require_realm=default_auth_realm

[rest_metadata_cache]
require_realm=default_auth_realm



sed -i -e 's/6446/${router_client_rw_port}/' /tmp/mysqlrouter/mysqlrouter.conf
sed -i -e 's/6447/${router_client_ro_port}/' /tmp/mysqlrouter/mysqlrouter.conf
sed -i -e 's/6448/${router_client_rw_x_port}/' /tmp/mysqlrouter/mysqlrouter.conf
sed -i -e 's/6449/${router_client_ro_x_port}/' /tmp/mysqlrouter/mysqlrouter.conf
sed -i -e 's/8443/${}/' /tmp/mysqlrouter/mysqlrouter.conf

iptables -A INPUT -p tcp --dport 3308 -j DROP
iptables -A OUTPUT -p tcp --sport 3308 -j DROP

iptables -F


docker build -t cr.yealinkops.com/3rdparty/mysql-server:8.0.27-v0.0.1 .

docker tag cr.yealinkops.com/3rdparty/mysql-8.0.27v001:latest cr.yealinkops.com/3rdparty/mysql-server:8.0.27-v0.0.1
docker push cr.yealinkops.com/3rdparty/mysql-server:8.0.27-v0.0.1

docker pull cr.yealinkops.com/3rdparty/mysql-8.0.27v001:latest

wget https://cdn.mysql.com//Downloads/MySQL-Shell/mysql-shell_8.0.27-1debian10_amd64.deb
dpkg -i ./mysql-shell_1.0.10-1ubuntu17.04_amd64.deb 